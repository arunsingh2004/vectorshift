{"ast":null,"code":"var _jsxFileName = \"D:\\\\vectorshift\\\\integrations_technical_assessment\\\\frontend\\\\src\\\\integrations\\\\notion.js\",\n  _s = $RefreshSig$();\n// notion.js\n\nimport { useState, useEffect } from \"react\";\nimport { Box, Button, CircularProgress } from \"@mui/material\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const NotionIntegration = ({\n  user,\n  org,\n  integrationParams,\n  setIntegrationParams\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  // Function to open OAuth in a new window\n  const handleConnectClick = async () => {\n    try {\n      setIsConnecting(true);\n      const formData = new FormData();\n      formData.append(\"user_id\", user);\n      formData.append(\"org_id\", org);\n      const response = await axios.post(`http://localhost:8000/integrations/notion/authorize`, formData);\n      console.log(response);\n      const authURL = response === null || response === void 0 ? void 0 : response.data;\n      const newWindow = window.open(authURL, \"Notion Authorization\", \"width=600, height=600\");\n\n      // Polling for the window to close\n      const pollTimer = window.setInterval(() => {\n        if ((newWindow === null || newWindow === void 0 ? void 0 : newWindow.closed) !== false) {\n          window.clearInterval(pollTimer);\n          handleWindowClosed();\n        }\n      }, 200);\n    } catch (e) {\n      var _e$response, _e$response$data;\n      setIsConnecting(false);\n      alert(e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.detail);\n    }\n  };\n\n  // Function to handle logic when the OAuth window closes\n  const handleWindowClosed = async () => {\n    try {\n      const formData = new FormData();\n      formData.append(\"user_id\", user);\n      formData.append(\"org_id\", org);\n      const response = await axios.post(`http://localhost:8000/integrations/notion/credentials`, formData);\n      const credentials = response.data;\n      if (credentials) {\n        setIsConnecting(false);\n        setIsConnected(true);\n        setIntegrationParams(prev => ({\n          ...prev,\n          credentials: credentials,\n          type: \"Notion\"\n        }));\n      }\n      setIsConnecting(false);\n    } catch (e) {\n      var _e$response2, _e$response2$data;\n      setIsConnecting(false);\n      alert(e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.detail);\n    }\n  };\n  useEffect(() => {\n    setIsConnected(integrationParams !== null && integrationParams !== void 0 && integrationParams.credentials ? true : false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: [\"Parameters\", /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        sx: {\n          mt: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: isConnected ? () => {} : handleConnectClick,\n          color: isConnected ? \"success\" : \"primary\",\n          disabled: isConnecting,\n          style: {\n            pointerEvents: isConnected ? \"none\" : \"auto\",\n            cursor: isConnected ? \"default\" : \"pointer\",\n            opacity: isConnected ? 1 : undefined\n          },\n          children: isConnected ? \"Notion Connected\" : isConnecting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this) : \"Connect to Notion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(NotionIntegration, \"YVzh0k4rAm9dKRmEfKk5oscD40o=\");\n_c = NotionIntegration;\nvar _c;\n$RefreshReg$(_c, \"NotionIntegration\");","map":{"version":3,"names":["useState","useEffect","Box","Button","CircularProgress","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","NotionIntegration","user","org","integrationParams","setIntegrationParams","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","handleConnectClick","formData","FormData","append","response","post","console","log","authURL","data","newWindow","window","open","pollTimer","setInterval","closed","clearInterval","handleWindowClosed","e","_e$response","_e$response$data","alert","detail","credentials","prev","type","_e$response2","_e$response2$data","children","sx","mt","display","alignItems","justifyContent","variant","onClick","color","disabled","style","pointerEvents","cursor","opacity","undefined","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/vectorshift/integrations_technical_assessment/frontend/src/integrations/notion.js"],"sourcesContent":["// notion.js\n\nimport { useState, useEffect } from \"react\";\nimport { Box, Button, CircularProgress } from \"@mui/material\";\nimport axios from \"axios\";\n\nexport const NotionIntegration = ({\n  user,\n  org,\n  integrationParams,\n  setIntegrationParams,\n}) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  // Function to open OAuth in a new window\n  const handleConnectClick = async () => {\n    try {\n      setIsConnecting(true);\n      const formData = new FormData();\n      formData.append(\"user_id\", user);\n      formData.append(\"org_id\", org);\n      const response = await axios.post(\n        `http://localhost:8000/integrations/notion/authorize`,\n        formData\n      );\n      console.log(response);\n      const authURL = response?.data;\n\n      const newWindow = window.open(\n        authURL,\n        \"Notion Authorization\",\n        \"width=600, height=600\"\n      );\n\n      // Polling for the window to close\n      const pollTimer = window.setInterval(() => {\n        if (newWindow?.closed !== false) {\n          window.clearInterval(pollTimer);\n          handleWindowClosed();\n        }\n      }, 200);\n    } catch (e) {\n      setIsConnecting(false);\n      alert(e?.response?.data?.detail);\n    }\n  };\n\n  // Function to handle logic when the OAuth window closes\n  const handleWindowClosed = async () => {\n    try {\n      const formData = new FormData();\n      formData.append(\"user_id\", user);\n      formData.append(\"org_id\", org);\n      const response = await axios.post(\n        `http://localhost:8000/integrations/notion/credentials`,\n        formData\n      );\n      const credentials = response.data;\n      if (credentials) {\n        setIsConnecting(false);\n        setIsConnected(true);\n        setIntegrationParams((prev) => ({\n          ...prev,\n          credentials: credentials,\n          type: \"Notion\",\n        }));\n      }\n      setIsConnecting(false);\n    } catch (e) {\n      setIsConnecting(false);\n      alert(e?.response?.data?.detail);\n    }\n  };\n\n  useEffect(() => {\n    setIsConnected(integrationParams?.credentials ? true : false);\n  }, []);\n\n  return (\n    <>\n      <Box sx={{ mt: 2 }}>\n        Parameters\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          sx={{ mt: 2 }}\n        >\n          <Button\n            variant=\"contained\"\n            onClick={isConnected ? () => {} : handleConnectClick}\n            color={isConnected ? \"success\" : \"primary\"}\n            disabled={isConnecting}\n            style={{\n              pointerEvents: isConnected ? \"none\" : \"auto\",\n              cursor: isConnected ? \"default\" : \"pointer\",\n              opacity: isConnected ? 1 : undefined,\n            }}\n          >\n            {isConnected ? (\n              \"Notion Connected\"\n            ) : isConnecting ? (\n              <CircularProgress size={20} />\n            ) : (\n              \"Connect to Notion\"\n            )}\n          </Button>\n        </Box>\n      </Box>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}